-- utterances and sentences
Utt ::= Utt Punct        # head punct
Utt ::= Conj Utt         # cc head
Utt ::= NP_obl comma Utt # cc punct head
Utt ::= parenth Utt parenth # punct head punct

Utt ::= S
Utt ::= QS
Utt ::= Imp
Utt ::= NP
Utt ::= AP
Utt ::= IP
Utt ::= IAdv
Utt ::= Num

-- sentences, direct
S ::= NP VP neg? # nsubj head advmod
S ::= NP have neg? AdV? VP  # nsubj aux advmod advmod head
S ::= NP aux neg? AdV? have? VP  # nsubj aux advmod advmod aux head

-- subordinate
S ::= NP neg AdV? VP # nsubj advmod advmod head
S ::= NP neg AdV? have VP  # nsubj advmod advmod aux head
S ::= NP neg AdV? aux have? VP  # nsubj advmod advmod aux aux head

-- inverted
S ::= V NP neg AdV? NP? NP_obl? Adv? # head nsubj advmod advmod obj obl advmod
S ::= have NP neg AdV? VP  # aux nsubj advmod advmod head
S ::= aux NP neg AdV? have? VP  # aux nsubj advmod advmod aux head

-- with copula, direct
S ::= NP cop neg? AdV? Comp # nsubj cop advmod advmod head
S ::= NP have neg? AdV? cop Comp # nsubj aux advmod advmod cop head
S ::= NP aux neg? AdV? have? cop Comp # nsubj aux advmod advmod aux cop head

-- subordinate
S ::= NP neg? AdV? aux? have? cop Comp # nsubj advmod advmod aux aux cop head

S ::= NP VP # nsubj head
S ::= NP do neg VP  # nsubj aux advmod head
S ::= NP have neg? VP  # nsubj aux advmod head
S ::= NP aux neg? have? VP  # nsubj aux advmod aux head

S ::= NP cop AdV? neg? Comp # nsubj cop advmod advmod head
S ::= NP have AdV? neg? cop Comp # nsubj aux advmod advmod cop head
S ::= NP aux AdV?  neg? have? cop Comp # nsubj aux advmod advmod aux cop head

S ::= NP cop AdV? neg? VP_pass # nsubj:pass aux:pass advmod advmod head
S ::= NP have AdV? neg? cop VP_pass # nsubj:pass aux advmod advmod aux:pass head
S ::= NP aux AdV? neg? have? cop VP_pass # nsubj:pass aux advmod advmod aux aux:pass head

S ::= there be_V AdV? neg? NP # expl head advmod advmod nsubj
S ::= there have AdV? neg? be_V neg? NP # expl aux advmod advmod head nsubj
S ::= there aux AdV? neg? have? be_V NP # expl aux advmod advmod aux head nsubj
S ::= it cop AdV? neg? AP # expl cop advmod advmod head

S ::= NP be_V neg? SC # nsubj head advmod ccomp
S ::= NP have neg? be_V SC # nsubj aux advmod head ccomp
S ::= NP aux neg? have? be_V SC # nsubj aux advmod aux head ccomp

S ::= SC VP # csubj head
S ::= SC do neg VP # csubj aux advmod head
S ::= SC cop neg? VP_pass # csubj:pass aux:pass advmod head
S ::= SC have neg? cop VP_pass # csubj:pass aux advmod aux:pass head
S ::= S_front NP VS # parataxis nsubj head

QS ::= do NP neg? VP # aux nsubj advmod head
QS ::= aux NP neg? have? VP # aux nsubj advmod aux head
QS ::= cop NP neg? Comp # cop nsubj advmod head
QS ::= cop neg NP Comp # cop nsubj advmod head

QS ::= cop NP neg? VP_pass # aux:pass nsubj:pass advmod head
QS ::= have NP neg? cop VP_pass # aux nsubj:pass advmod aux:pass head
QS ::= aux NP neg? have? cop VP_pass # aux nsubj:pass advmod aux:pass aux head

QS ::= IP VP # nsubj head
QS ::= IP do neg VP # nsubj aux advmod head
QS ::= IP aux neg? have? VP # nsubj aux advmod aux head
QS ::= IP cop neg? Comp # nsubj cop advmod head
QS ::= IP aux neg? have? cop Comp # nsubj cop advmod aux head
QS ::= IP do NP neg? VPSlash # obj aux nsubj advmod head
QS ::= IP aux NP neg? have? VPSlash # obj aux nsubj advmod aux head

QS ::= IP cop neg? VP_pass # nsubj:pass aux:pass advmod head
QS ::= IP have neg? cop VP_pass # nsubj:pass aux advmod aux:pass head
QS ::= IP aux neg? have? cop VP_pass # nsubj:pass aux advmod aux:pass aux head

QS ::= IAdv do NP neg? VP # advmod aux nsubj advmod head
QS ::= IAdv aux NP neg? have? VP # advmod aux nsubj advmod aux head
QS ::= IAdv cop NP neg? Comp # advmod cop nsubj advmod head
QS ::= IAdv cop neg NP Comp # advmod cop nsubj advmod head

QS ::= IAdv cop NP neg? VP_pass # advmod aux:pass nsubj:pass advmod head
-- indirect questions
QS ::= if S # mark head
QS ::= IP som neg? AdV? aux? have? VP # dislocated nsubj advmod advmod aux aux head
QS ::= IP NP does? neg? VPSlash # obj nsubj nsubj advmod head
QS ::= IP NP aux neg? have? VPSlash # obj nsubj aux advmod aux head
QS ::= IAdv NP neg? AdV? VP # advmod nsubj advmod advmod head
QS ::= IAdv NP neg? AdV? aux? have? VP # advmod nsubj advmod advmod aux aux head
QS ::= IAdv NP neg? AdV? aux? have? cop Comp # advmod nsubj advmod advmod aux aux cop head

RS ::= RP neg? Adv? aux? have? VP # nsubj advmod advmod aux aux head
RS ::= RP neg? Adv? aux? have? cop Comp # nsubj advmod advmod aux aux cop head
RS ::= RP? NP neg? Adv? aux? have? VPSlash # obj nsubj advmod advmod aux aux head
RS ::= RP neg? Adv? aux? have? VP_pass # nsubj:pass advmod advmod aux aux head # 0.8

-- imperatives
Imp ::= do? neg? VP # aux advmod head
Imp ::= do? neg? cop Comp # aux advmod cop head

-- sentences with adverbials
S  ::= S_subcomma S # advcl head
S  ::= S S_sub # head advcl
S  ::= Adv_comma S # advmod head
S  ::= NP_oblcomma S # nmod head

-- embedded sentences
SC ::= S_that
SC ::= QS
SC ::= VP_to


VP ::= V Prep_prt? # head compound:prt
VP ::= aux # # 0.001
VP ::= V2 Prep_prt? NP # head compound:prt obj # 0.05
VP ::= V2 NP_obl # head obl
VP ::= V3 NP NP # head iobj obj
VP ::= V2C NP NP # head obj xcomp
VP ::= V2C NP AP # head obj xcomp
VP ::= VS S_that # head ccomp
VP ::= VV VP_to # head xcomp
VP ::= V2V NP VP # head obj xcomp
VP ::= V2V NP VP_to # head obj xcomp
VP ::= VP comma? Adv # head punct advmod
VP ::= VP NP_obl # head obl # 0.001
VP ::= VS S_direct # head parataxis

VP_pass ::= V_pass NP_obl? Adv? # head obl advmod

VPSlash ::= V2
VPSlash ::= VPSlash NP_obl  # head obl # 0.001
VPSlash ::= VPSlash Adv # head advmod
VPSlash ::= VP Prep # head case # 0.001

S_that ::= that? S # mark head

S_direct ::= colon S # punct head
S_direct ::= colon quote S quote # punct punct head punct
S_front  ::= S comma # head punct
S_front  ::= quote S quote comma # punct head punct punct

Comp ::= AP
Comp ::= NP
Comp ::= Adv
Comp ::= NP_obl
Comp ::= Comp comma? NP_obl # head punct nmod
Comp ::= Comp comma? Adv # head punct advmod


-- VP with to
VP_to ::= to neg? AdV? VP # mark advmod advmod head
VP_to ::= to neg? AdV? cop Comp # mark advmod advmod cop head

-- oblique noun phrase
NP_obl ::= Prep NP # case head

-- noun phrases
NP ::= PN
NP ::= Pron
NP ::= Num # # 0.1
NP ::= Det # # 0.1

NP ::= Det? CN # det head
NP ::= NP comma? NP_obl # head punct nmod
NP ::= Predet NP # det:predet head
NP ::= NP_poss CN # nmod:poss head
NP ::= Num NP # nummod head
NP ::= N PN # head flat
NP ::= NP SC # head acl
NP ::= NP comma? S_sub # head punct acl
NP ::= NP comma? RS # head punct acl:relcl
NP ::= Symb Num # head nummod

NP_poss ::= NP 's # head case
NP_poss ::= Pron_poss

-- some very special rules ---
NP        ::= Det CN_quoted # det head
CN_quoted ::= quote CN quote # punct head punct
NP        ::= NP NP_appos # head appos # 0.01
NP_appos  ::= Punct_appos NP # punct head

Num ::= Card
Num ::= Digits

CN ::= N
CN ::= AP CN # amod head
CN ::= CN comma? AP # head punct amod # 0.01

PN ::= PN_one PN # head flat

N ::= N_one N # compound head
N ::= PN CN # compound head

Card ::= Card_one Card # compound head

IP ::= IDet CN # det head

-- adjectival phrases
AP ::= A
AP ::= AdA AP     # advmod head
AP ::= AP NP_obl  # head nmod

-- adverbials
-- Adv ::= Prep NP # case head

S_sub       ::= comma? Subj S # punct mark head
S_subcomma  ::= Subj S comma? # mark head punct
Adv_comma   ::= Adv comma? # head punct
NP_oblcomma ::= NP_obl comma? # head punct
S_sub       ::= comma? Subj VP # punct mark head # 0.1
S_subcomma  ::= Subj VP comma? # mark head punct # 0.1

-- coordination
S       ::= Conj_pre? ListS S_conj # cc:preconj head conj
ListS   ::= S
ListS   ::= ListS S_comma # head conj
S_conj  ::= comma? Conj S # punct cc head
S_comma ::= comma S # punct head

NP       ::= Conj_pre? ListNP NP_conj # cc:preconj head conj
ListNP   ::= NP
ListNP   ::= ListNP NP_comma # head conj
NP_conj  ::= comma? Conj NP # punct cc head
NP_comma ::= comma NP # punct head

AP       ::= Conj_pre? ListAP AP_conj # cc:preconj head conj
ListAP   ::= AP
ListAP   ::= ListAP AP_comma # head conj
AP_conj  ::= comma? Conj AP # punct cc head
AP_comma ::= comma AP # punct head

VP       ::= Conj_pre? ListVP VP_conj # cc:preconj head conj
ListVP   ::= VP
ListVP   ::= ListVP VP_comma # head conj
VP_conj  ::= comma? Conj VP # punct cc head
VP_comma ::= comma VP # punct head

-- in Adv conjunctions, we want to include NP_obl parts: all that matters for UD is the category of the first conjunct
Adv       ::= Conj_pre? ListAdv Adv_conj # cc:preconj head conj
ListAdv   ::= Adv
ListAdv   ::= ListAdv Adv_comma # head conj
Adv_conj  ::= comma? Conj Adv # punct cc head
Adv_conj  ::= comma? Conj NP_obl # punct cc head
Adv_comma ::= comma Adv # punct head
Adv_comma ::= comma NP_obl # punct head

NP_obl     ::= Conj_pre? ListNP_obl Adv_conj # cc:preconj head conj
ListNP_obl ::= NP_obl
ListNP_obl ::= ListNP_obl Adv_comma # head conj


-- POS tag configurations
#pos AUX cop do have aux
#pos VERB V V2 V3 VS VV V2V V2C be_V ertil
#pos NOUN N N_one
#pos ADJ A
#pos PROPN PN PN_one
#pos ADV Adv AdA AdV Predet neg
#pos SCONJ Subj that if
#pos CCONJ Conj Conj_pre
#pos DET Det IDet
#pos PRON Pron IP Pron_poss it sem
#pos PART to 's
#pos PUNCT Punct Punct_appos comma quote colon parenth
#pos NUM Card Digits Card_one
#pos ADP Prep Prep_prt
#pos SYM Symb

#pos VERB_Voice=Pass V_pass

#pos PRON_PronType=Rel RP
#pos PRON_PronType=Int IAdv

#pos NOUN_Case=Gen N_gen
#pos PROPN_Case=Gen PN_gen

-- structural word lexicon: normal categories
#token IP hver hvað
#token IAdv hvenær hvernig hvar afhverju
#token AdA mjög fyrir
#token AdV alltaf aldrei
#token Det einn ein eitt það hver hvergi hverju einhver einhvað einhverjum enginn ekkert engu nokkur neitt engir
#token Pron ég mig þú þig hann honum henni við okkur þið ykkur þeir þeim þá
#token Subj ef þegar þó að
#token aux getur gat mátti viljað mun eigi skuli skyldi
#token Punct . ! ?
#token Punct_appos , :
#token Conj og eða
#token Conj_pre bæði hvorki
#token IDet hvaða hvilken hvilket hvilka
#token Pron_poss minn mitt mínir þín þitt þínir hans hennar okkar okkar okkar ykkar ykkar ykkar þeirra sína sitt sínir
#token RP sem

-- structural word lexicon: syncategorematic words
#token cop er eru var voru verið
#token be_V er eru var voru verið
#token do gera gerir gerði gerðu
#token have hafa hefur hafði haft
#token neg ekki
#token that að
#token to til
#token it það
#token if ef hvort
#token there þar
#token comma ,
#token colon :
#token quote "
#token ertil er til
#token parenth ( ) [ ]

-- content word lexicon
#token PN Jóna Guðmundur
#token V sofa sofið fór fram ganga gengur gengu söng syngur söng sungið flytja flytur flutti gerist gerist gerðist fara fer ferðast fór hlaupa hleypur hljóta hlýtur hlaut vita veit vissi vitna vinnur vann vinna ákveða ákvað ákveðið
#token V2 sjá sér sáði sáð seen älska elskar elskuðu líta lítur litið gefa gefur gaf hafa hefur hafði koma kemur kom passa passar passaði ákveða ákveður ákveðið
#token V2C kalla kallar kallaði íhuga íhugar íhugaði
#token V2V sjá sjáir sáði íhuga íhugar íhugaði stöðva stöðvar stöðvaði
#token VS segir segir sagði trúa trúir trúaði
#token VV vilja vill reyna reynir
#token A gamall góður forvitinn svartur bestur kaldur breyttur þreyttur slæmur stór stærri
#token N ást svefn mannirnir menn kona konur köttur kettir læknir bjór heimurinn íslenska tréð eitthvað annað tími röddin stofan vísindin kona konur
#token N hús forseti tungl jörð stelpa stelpur vín bjór
#token Adv núna í dag hér áður þarna í gær á morgun alltaf
#token Predet líklega aðeins
#token Symb $





